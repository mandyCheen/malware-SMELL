from malwareDetector.detector import detector
from typing import Any
import numpy as np
import PIL.Image as Image



class smellDetector(detector):
    def __init__(self) -> None:
        super().__init__()
        

    def extractFeature(self, bin_path, save_path, padding=False, fuzzy=None, img_width=64) -> Any:
        '''
        This function converts the malware binary file into a grayscale image.
        '''
        
        with open(bin_path, "rb") as f:
            print(f"\rExtracting features from {bin_path}...", end="")
            image = np.fromfile(f, dtype=np.byte)
            crop_w = int(image.shape[0] ** 0.5)
            image = image[:crop_w ** 2]
            image = image.reshape((crop_w, crop_w))
            image = np.uint8(image)
            if padding and crop_w < img_width:
                image = np.pad(image, (img_width - crop_w), 'constant', constant_values=(0))
            im = Image.fromarray(image)
            if fuzzy is not None:
                im = im.resize((fuzzy, fuzzy), Image.LANCZOS)
            im = im.resize((img_width, img_width), Image.LANCZOS)

        im.save(save_path + '.jpg', 'JPEG')
    
        return im

    def vectorize(self) -> np.array:
        return 'This is the implementation of the vectorize function from the derived class.'

    def model(self) -> Any:
        return 'This is the implementation of the model function from the derived class.'

    def predict(self) -> np.array:
        return 'This is the implementation of the predict function from the derived class.'